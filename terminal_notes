# order processes by cpu %
ps axch -o cmd,%cpu --sort=-%cpu
    ax - print out "human processes"
    c - hides full path to binary
    h - hides header
    -o cmd,%cpu - ouputs only command and cpu%
    --sort=-%cpu - sorts by cpu usage high to low
    
# wget "help"
#  you can use curly braces to download all the URLs that match the pattern
wget https://www.kernel.org/pub/linux/kernel/v3.0/linux-3.2.{1..15}.tar.bz2
# -r and -l1 options together enable 1-level deep recursive retrieval, and -A option specifies lists of file name suffixes 2 accept
wget -r -l1 -A.bz2 http://aaa.com/directory 

# display currently established, closed, orphaned and waiting TCP sockets
ss -s

# list all open ports
ss -l

# active connections
netstat -tulpn

# one line while loop
while true; do; echo -n "last update: "; date; echo; paste <(df -H) <(ccache -s); echo; tail ~/build_out.txt; done
    paste - allows you to hv 2 outputs side-by-side

# terminal weather
curl wttr.in

# public ip
curl ipinfo.io/ip

# list folder with numerical order
ls -v *folder
ls -aslv *folder*

# create dir and cd into it
mkdir foo && cd "$_"

# dns to ip and get mail exchange ( MX )
nslookup
>*domain*
...
# to get MX
> set type=mx
> *domain*
...

# youtube-dl mp3 download
youtube-dl --audio-quality 0 --audio-format mp3 -x -o '%(title)s.%(ext)s' --restrict-filenames $1

# webm to mp4
ffmpeg -i in.webm out.mp4

# line number in less
*inside less* -N *enter*

# proxy checker
for proxy in $(cat proxys.txt); do (curl -s --max-time 30 -x $proxy ifconfig.io/ip > /dev/null 2>&1;if [[ $? -eq 0 ]]; then echo "$proxy IS OK"|tee -a online_proxys.txt; else echo "$proxy NOT OK";fi) & disown;done
    $() == ´´
    commands are inside () so the script can "be threaded"
    disown is need or else the background process finish will show
    used tee -a so it can append to stdout and to file
